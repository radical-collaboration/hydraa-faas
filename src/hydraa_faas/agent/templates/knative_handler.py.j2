#!/usr/bin/env python3
import json
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
import signal

# User-defined handler function
{{ handler_code }}

class FunctionHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            # Read request body
            content_length = int(self.headers.get('Content-Length', 0))
            body = self.rfile.read(content_length).decode('utf-8') if content_length > 0 else '{}'
            
            # Parse JSON payload
            try:
                payload = json.loads(body) if body.strip() else {}
            except json.JSONDecodeError:
                payload = body
            
            # Call user handler
            result = handle(payload)
            
            # Send response
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            
            if isinstance(result, (dict, list)):
                response = json.dumps(result)
            else:
                response = json.dumps({"result": str(result)})
                
            self.wfile.write(response.encode('utf-8'))
            
        except Exception as e:
            # Send error response
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            error_response = {"error": str(e), "type": type(e).__name__}
            self.wfile.write(json.dumps(error_response).encode('utf-8'))
    
    def do_GET(self):
        if self.path in ['/_/health', '/health']:
            # Health check endpoint
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({"status": "healthy"}).encode('utf-8'))
        else:
            # For other GET requests, return a simple response
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            result = handle({})  # Call with empty payload
            if isinstance(result, (dict, list)):
                response = json.dumps(result)
            else:
                response = json.dumps({"result": str(result)})
            self.wfile.write(response.encode('utf-8'))

def signal_handler(signum, frame):
    print("Shutting down gracefully...")
    sys.exit(0)

if __name__ == "__main__":
    # Set up signal handlers
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # Start HTTP server
    port = 8080
    server = HTTPServer(('0.0.0.0', port), FunctionHandler)
    print(f"Function server starting on port {port}")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("Server stopped")
    finally:
        server.server_close()
